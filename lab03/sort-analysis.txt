Input      Initial    Number     Avg Time           Avg Time
Size       Order      of Runs    for sortIntList    for sort
10000      random     5          0.37 sec           0.00 sec
10000      sorted     5          0.01 sec           0.00 sec
10000      reverse    5          0.01 sec           0.00 sec
20000      random     5          1.78 sec           0.00 sec
20000      sorted     5          0.02 sec           0.00 sec
20000      reverse    5          0.02 sec           0.00 sec
40000      random     5          8.31 sec           0.01 sec
40000      sorted     5          0.05 sec           0.01 sec
40000      reverse    5          0.05 sec           0.01 sec
60000      random     5          19.84 sec          0.03 sec
60000      sorted     5          0.07 sec           0.01 sec
60000      reverse    5          0.07 sec           0.01 sec
100000     random     5          57.70 sec          0.04 sec
100000     sorted     5          0.11 sec           0.02 sec
100000     reverse    5          0.10 sec           0.02 sec
150000     random     5          133.08 sec         0.08 sec
150000     sorted     5          0.17 sec           0.03 sec
150000     reverse    5          0.16 sec           0.03 sec
300000     random     5          too long           0.18 sec
300000     sorted     5          0.33 sec           0.08 sec
300000     reverse    5          0.32 sec           0.09 sec
500000     random     5          too long           0.35 sec
500000     sorted     5          0.53 sec           0.13 sec
500000     reverse    5          0.53 sec           0.15 sec
1000000    random     5          too long           0.73 sec
1000000    sorted     5          1.04 sec           0.27 sec
1000000    reverse    5          1.04 sec           0.30 sec
2000000    random     5          too long           1.70 sec
2000000    sorted     5          2.08 sec           0.66 sec
2000000    reverse    5          2.07 sec           0.66 sec
4000000    random     5          too long           3.52 sec
4000000    sorted     5          4.18 sec           1.34 sec
4000000    reverse    5          4.18 sec           1.39 sec
8000000    random     5          too long           7.46 sec
8000000    sorted     5          8.53 sec           2.73 sec
8000000    reverse    5          8.42 sec           2.82 sec
10000000   random     5          too long           9.38 sec
10000000   sorted     5          10.76 sec          3.38 sec
10000000   reverse    5          10.62 sec          3.56 sec


Explanation of timing results:

Looking at the results of the timings, the one that is most different from the rest is the sortIntList function
sorting random. The plotting of the results on a graph shows that the time complexity of the function is o(n^2).
As the data gets larger in size, we see an exponential increase in the time needed to compute the function. This is
the case because the function sometimes has to go through the statement 

for (struct IntListNode *counter = l->first;   
	counter != NULL; counter = counter->next) {
		if (v <= counter->next->data) {
	  	n->next = counter->next;
			counter->next = n;
			break;
	}
}.

where the statement goes through a for loop which means it has the time complexity of O(n), since the main function
is also an iteration of the sequence, we multiply the time complexity resulting in the total time complexity of 
O(n^2).

This is different for the sorted and reverse timings as plotting the results on a graph shows the time complexity of
O(n) instead of O(n^2). The reason for this is because the function for reverse and sorted comes through the functions

else if (v <= l->first->data) { 		           
		n->next = l->first; 				            
		l->first = n;						            
	}
 
and 

else if (v >= l->last->data)	{ 		            
		l->last->next = n;					            
		l->last = n;
	}

respectively. Both these time complexities are O(1) which means that the total time complexity of the whole program
is O(n) as it iterates through the entire number sequence and if it only goes through the first and second statements
it would correlate to the total time complexity of o(n). For the sort function, the time complexity for sorted, random
and reverse would be O(n) as when plotted on the graph, it shows a straight line.
